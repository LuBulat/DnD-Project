from flask import Flask, jsonify, request, render_template, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_bcrypt import Bcrypt

# Inicijalizacija Flask aplikacije
app = Flask(__name__)

# Tajni ključ za sesije
app.config['SECRET_KEY'] = 'd50fa3b8-9d7c-41e8-90e1-1c6b56d78fda'

# Konfiguracija za kolačiće sesije (bitno za CORS)
app.config['SESSION_COOKIE_SAMESITE'] = 'None'
app.config['SESSION_COOKIE_SECURE'] = True

# Omogućavanje CORS-a
CORS(app, supports_credentials=True, origins=["http://localhost:5173"])

# Konfiguracija baze podataka
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:root@localhost/dnd'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Inicijalizacija modula
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"

# Model za karaktere
class Character(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    race = db.Column(db.String(50), nullable=False)
    char_class = db.Column(db.String(50), nullable=False)
    level = db.Column(db.Integer, default=1)
    strength = db.Column(db.Integer, default=10)
    dexterity = db.Column(db.Integer, default=10)
    constitution = db.Column(db.Integer, default=10)
    intelligence = db.Column(db.Integer, default=10)
    wisdom = db.Column(db.Integer, default=10)
    charisma = db.Column(db.Integer, default=10)
    proficiency_bonus = db.Column(db.Integer, default=2)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)  # Veza sa User modelom

    def __repr__(self):
        return f"<Character {self.name}>"
    
    def calculate_skill_bonus(self, skill):
        attribute_bonus = 0
        skill_bonus = 0
        if skill == 'athletics':
            attribute_bonus = (self.strength - 10) // 2
        elif skill == 'acrobatics':
            attribute_bonus = (self.dexterity - 10) // 2
        elif skill == 'survival':
            attribute_bonus = (self.wisdom - 10) // 2
        if skill in self.get_proficient_skills():
            skill_bonus = attribute_bonus + self.proficiency_bonus
        else:
            skill_bonus = attribute_bonus
        return skill_bonus

    def get_proficient_skills(self):
        return ['athletics', 'acrobatics']  # Primer, trebalo bi da zavisi od klase/rase

# Model za korisnike
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

    characters = db.relationship('Character', backref='owner', lazy=True)

    def __repr__(self):
        return f"<User {self.username}>"
    
# Model za rase
class Race(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)
    ability_score_increase = db.Column(db.Text, nullable=False)
    speed = db.Column(db.Integer, nullable=False)
    traits = db.Column(db.Text, nullable=False)
    languages = db.Column(db.Text, nullable=False)

# Model za podrase
class Subrace(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    ability_score_increase = db.Column(db.Text, nullable=False)
    traits = db.Column(db.Text, nullable=False)
    race_id = db.Column(db.Integer, db.ForeignKey('race.id'), nullable=False)

    race = db.relationship('Race', backref=db.backref('subraces', lazy=True))

# Model za klase
class Class(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)
    hit_die = db.Column(db.Integer, nullable=False)
    saving_throws = db.Column(db.String(100), nullable=False)
    armor_proficiencies = db.Column(db.String(100), nullable=False)
    weapon_proficiencies = db.Column(db.String(100), nullable=False)
    tool_proficiencies = db.Column(db.String(100), nullable=False)
    skill_choices = db.Column(db.String(200), nullable=False)
    num_skills = db.Column(db.Integer, nullable=False)
    spellcasting = db.Column(db.Boolean, default=False)
    starting_equipment = db.Column(db.Text, nullable=False)
    class_features = db.Column(db.Text, nullable=False)

    def __repr__(self):
        return f"<Class {self.name}>"

# Model za pozadine (Backgrounds)
class Background(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    skill_proficiencies = db.Column(db.String(200), nullable=False)
    tool_proficiencies = db.Column(db.String(200), nullable=True)
    starting_equipment = db.Column(db.Text, nullable=False)
    starting_gold = db.Column(db.Integer, default=0)
    features = db.Column(db.Text, nullable=False)
    languages = db.Column(db.String(200), nullable=True)

    def __repr__(self):
        return f"<Background {self.name}>"
    
# Kreiranje tabela ako ne postoje
with app.app_context():
    db.create_all()

    # Provera da li tabela race već ima podatke
    if not Race.query.first():
        races = [
            Race(name="Dragonborn", ability_score_increase="Strength +2, Charisma +1", speed=30, traits="Draconic Ancestry, Breath Weapon, Damage Resistance", languages="Common, Draconic"),
            Race(name="Dwarf", ability_score_increase="Constitution +2", speed=25, traits="Darkvision, Dwarven Resilience, Dwarven Combat Training, Tool Proficiency, Stonecunning, Speed is not reduced by heavy armor", languages="Common, Dwarvish"),
            Race(name="Elf", ability_score_increase="Dexterity +2", speed=30, traits="Darkvision, Fey Ancestry, Trance, Keen Senses", languages="Common, Elven"),
            Race(name="Gnome", ability_score_increase="Intelligence +2", speed=25, traits="Darkvision, Gnome Cunning", languages="Common, Gnomish"),
            Race(name="Half-Elf", ability_score_increase="Charisma +2, plus two other ability scores +1", speed=30, traits="Darkvision, Fey Ancestry, Half-Elf Versatility", languages="Common, Elven, one choice"),
            Race(name="Half-Orc", ability_score_increase="Strength +2, Constitution +1", speed=30, traits="Darkvision, Menacing, Relentless Endurance, Savage Attacks", languages="Common, Orc"),
            Race(name="Halfling", ability_score_increase="Dexterity +2", speed=25, traits="Lucky, Brave, Nimble", languages="Common, Halfling"),
            Race(name="Human", ability_score_increase="All ability scores +1", speed=30, traits="None", languages="Common, Choice"),
            Race(name="Tiefling", ability_score_increase="Charisma +2", speed=30, traits="Darkvision, Hellish Resistance", languages="Common, Infernal")
        ]
        db.session.bulk_save_objects(races)
        db.session.commit()
    
    # Provera da li tabela subrace već ima podatke
    if not Subrace.query.first():
        subraces = [
            # Dwarf subraces
            Subrace(name="Hill Dwarf", ability_score_increase="Wisdom +1", traits="Dwarven Toughness", race_id=2),
            Subrace(name="Mountain Dwarf", ability_score_increase="Strength +2", traits="Dwarven Armor Training", race_id=2),
            # Elf subraces
            Subrace(name="Dark Elf", ability_score_increase="Charisma +1", traits="Superior Darkvision, Sunlight Sensitivity, Drow Magic, Drow Weapon Training", race_id=3),
            Subrace(name="High Elf", ability_score_increase="Intelligence +1", traits="Cantrip, Elf Weapon Training, Extra Language", race_id=3),
            Subrace(name="Wood Elf", ability_score_increase="Wisdom +1", traits="Elf Weapon Training, Fleet of Foot, Mask of the Wild", race_id=3),
            # Gnome subraces
            Subrace(name="Forest Gnome", ability_score_increase="Dexterity +1", traits="Natural Illusionist, Speak with Small Beasts", race_id=4),
            Subrace(name="Rock Gnome", ability_score_increase="Constitution +1", traits="Artificer's Lore, Tinker", race_id=4),
            # Halfling subraces
            Subrace(name="Lightfoot", ability_score_increase="Charisma +1", traits="Naturally Stealthy", race_id=7),
            Subrace(name="Stout", ability_score_increase="Constitution +1", traits="Stout Resilience", race_id=7),
            # Tiefling subrace
            Subrace(name="Bloodline of Asmodeus", ability_score_increase="Intelligence +1", traits="Infernal Legacy", race_id=9)
        ]
        db.session.bulk_save_objects(subraces)
        db.session.commit()

    # Provera da li tabela classes već ima podatke
    if not Class.query.first():
        classes = [
            Class(
                name="Barbarian",
                hit_die=12,
                saving_throws="Strength, Constitution",
                armor_proficiencies="Light armor, Medium armor, Shields",
                weapon_proficiencies="Simple weapons, Martial weapons",
                tool_proficiencies="None",
                skill_choices="Animal Handling, Athletics, Intimidation, Nature, Perception, Survival",
                num_skills=2,
                spellcasting=False,
                starting_equipment="- (a) a greataxe or (b) any martial melee weapon\n- (a) two handaxes or (b) any simple weapon\n- An explorer's pack and four javelins",
                class_features="Rage, Unarmored Defense, Danger Sense, Reckless Attack, Primal Path, Ability Score Improvement, Extra Attack, Fast Movement, Feral Instinct, Brutal Critical, Relentless Rage, Persistent Rage, Indomitable Might, Primal Champion"
                ),
            Class(
                name="Bard",
                hit_die=8,
                saving_throws="Dexterity, Charisma",
                armor_proficiencies="Light armor",
                weapon_proficiencies="Simple weapons, hand crossbows, longswords, rapiers, shortswords",
                tool_proficiencies="Three musical instruments of your choice",
                skill_choices="Choose any three",
                num_skills=3,
                spellcasting=True,
                starting_equipment="- (a) a rapier, (b) a longsword, or (c) any simple weapon\n- (a) a diplomat's pack or (b) an entertainer's pack\n- (a) a lute or (b) any other musical instrument\n- Leather armor and a dagger",
                class_features="Spellcasting, Bardic Inspiration, Jack of All Trades, Song of Rest, Bard College, Expertise, Ability Score Improvement, Font of Inspiration, Countercharm, Magical Secrets, Superior Inspiration"
                ),
            Class(
                name="Cleric",
                hit_die=8,
                saving_throws="Wisdom, Charisma",
                armor_proficiencies="Light armor, Medium armor, Shields",
                weapon_proficiencies="All simple weapons",
                tool_proficiencies="None",
                skill_choices="History, Insight, Medicine, Persuasion, Religion",
                num_skills=2,
                spellcasting=True,
                starting_equipment="- (a) a mace or (b) a warhammer (if proficient)\n- (a) scale mail, (b) leather armor, or (c) chain mail (if proficient)\n- (a) a light crossbow and 20 bolts or (b) any simple weapon\n- (a) a priest's pack or (b) an explorer's pack\n- A shield and a holy symbol",
                class_features=" Spellcasting, Divine Domain, Channel Divinity, Ability Score Improvement, Cantrip Versatility, Destroy Undead, Divine Intervention"
                ),
            Class(
                name="Druid",
                hit_die=8,
                saving_throws="Intelligence, Wisdom",
                armor_proficiencies="Light armor, Medium armor, Shields (druids will not wear armor or use shields made of metal)",
                weapon_proficiencies="Clubs, Daggers, Darts, Javelins, Maces, Quarterstaffs, Scimitars, Sickles, Slings, Spears",
                tool_proficiencies="Herbalism kit",
                skill_choices="Arcana, Animal Handling, Insight, Medicine, Nature, Perception, Religion, Survival",
                num_skills=2,
                spellcasting=True,
                starting_equipment="- (a) a wooden shield or (b) any simple weapon\n- (a) a scimitar or (b) any simple melee weapon\n- Leather armor, an explorer's pack, and a druidic focus",
                class_features="Druidic, Spellcasting, Wild Shape, Druid Circle, Ability Score Improvement, Timeless Body, Beast Spells, Archdruid"
                ),
            Class(
                name="Fighter",
                hit_die=10,
                saving_throws="Strength, Constitution",
                armor_proficiencies="All armor, Shields",
                weapon_proficiencies="Simple weapons, Martial weapons",
                tool_proficiencies="None",
                skill_choices="Acrobatics, Animal Handling, Athletics, History, Insight, Intimidation, Perception, Survival",
                num_skills=2,
                spellcasting=False,
                starting_equipment="- (a) chain mail or (b) leather, longbow, and 20 arrows\n- (a) a martial weapon and a shield or (b) two martial weapons\n- (a) a light crossbow and 20 bolts or (b) two handaxes\n- (a) a dungeoneer's pack or (b) an explorer's pack",
                class_features="Fighting Style, Second Wind, Action Surge, Martial Archetype, Ability Score Improvement, Extra Attack, Indomitable"
                ),
            Class(
                name="Monk",
                hit_die=8,
                saving_throws="Strength, Dexterity",
                armor_proficiencies="None",
                weapon_proficiencies="Simple weapons, Shortswords",
                tool_proficiencies="Choose one type of artisan's tools or one musical instrument",
                skill_choices="Acrobatics, Athletics, History, Insight, Religion, Stealth",
                num_skills=2,
                spellcasting=False,
                starting_equipment="- (a) a shortsword or (b) any simple weapon\n- (a) a dungeoneer's pack or (b) an explorer's pack\n- 10 darts",
                class_features="Unarmored Defense, Martial Arts, Ki, Unarmored Movement, Monastic Tradition, Deflect Missiles, Ability Score Improvement, Slow Fall, Extra Attack, Stunning Strike, Ki-Empowered Strikes, Evasion, Stillness of Mind, Purity of Body, Tongue of the Sun and Moon, Diamond Soul, Timeless Body, Empty Body, Perfect Self"
                ),
            Class(
                name="Paladin",
                hit_die=10,
                saving_throws="Wisdom, Charisma",
                armor_proficiencies="All armor, Shields",
                weapon_proficiencies="Simple weapons, Martial weapons",
                tool_proficiencies="None",
                skill_choices="Athletics, Insight, Intimidation, Medicine, Persuasion, Religion",
                num_skills=2,
                spellcasting=True,
                starting_equipment="- (a) a martial weapon and a shield or (b) two martial weapons\n- (a) five javelins or (b) any simple melee weapon\n- (a) a priest's pack or (b) an explorer's pack\n- Chain mail and a holy symbol",
                class_features="Divine Sense, Lay on Hands, Fighting Style, Spellcasting, Divine Smite, Divine Health, Sacred Oath, Ability Score Improvement, Extra Attack, Aura of Protection, Aura of Courage, Improved Divine Smite, Cleansing Touch"
                ),
            Class(
                name="Ranger",
                hit_die=10,
                saving_throws="Strength, Dexterity",
                armor_proficiencies="Light armor, Medium armor, Shields",
                weapon_proficiencies="Simple weapons, Martial weapons",
                tool_proficiencies="None",
                skill_choices="Animal Handling, Athletics, Insight, Investigation, Nature, Perception, Stealth, Survival",
                num_skills=3,
                spellcasting=True,
                starting_equipment="- (a) scale mail or (b) leather armor\n- (a) two shortswords or (b) two simple melee weapons\n- (a) a dungeoneer's pack or (b) an explorer's pack\n- A longbow and a quiver of 20 arrows",
                class_features="Favored Enemy, Natural Explorer, Fighting Style, Spellcasting, Ranger Archetype, Primeval Awareness, Ability Score Improvement, Extra Attack, Land's Stride, Hide in Plain Sight, Vanish, Feral Senses, Foe Slayer"
                ),
            Class(
                name="Rogue",
                hit_die=8,
                saving_throws="Dexterity, Intelligence",
                armor_proficiencies="Light armor",
                weapon_proficiencies="Simple weapons, Hand crossbows, Longswords, Rapiers, Shortswords",
                tool_proficiencies="Thieves' tools",
                skill_choices="Acrobatics, Athletics, Deception, Insight, Intimidation, Investigation, Perception, Performance, Persuasion, Sleight of Hand, Stealth",
                num_skills=4,
                spellcasting=False,
                starting_equipment="- (a) a rapier or (b) a shortsword\n- (a) a shortbow and quiver of 20 arrows or (b) a shortsword\n- (a) a burglar's pack, (b) dungeoneer's pack, or (c) an explorer's pack\n- Leather armor, two daggers, and thieves' tools",
                class_features="Expertise, Sneak Attack, Thieves' Cant, Cunning Action, Roguish Archetype, Ability Score Improvement, Uncanny Dodge, Evasion, Reliable Talent, Blindsense, Slippery Mind, Elusive, Stroke of Luck"
                ),
            Class(
                name="Sorcerer",
                hit_die=6,
                saving_throws="Constitution, Charisma",
                armor_proficiencies="None",
                weapon_proficiencies="Daggers, Darts, Slings, Quarterstaffs, Light crossbows",
                tool_proficiencies="None",
                skill_choices="Arcana, Deception, Insight, Intimidation, Persuasion, Religion",
                num_skills=2,
                spellcasting=True,
                starting_equipment="- (a) a light crossbow and 20 bolts or (b) any simple weapon\n- (a) a component pouch or (b) an arcane focus\n- (a) a dungeoneer's pack or (b) an explorer's pack\n- Two daggers",
                class_features="Spellcasting, Sorcerous Origin, Font of Magic, Metamagic, Ability Score Improvement, Sorcerous Restoration"
                ),
            Class(
                name="Warlock",
                hit_die=8,
                saving_throws="Wisdom, Charisma",
                armor_proficiencies="Light armor",
                weapon_proficiencies="Simple weapons",
                tool_proficiencies="None",
                skill_choices="Arcana, Deception, History, Intimidation, Investigation, Nature, Religion",
                num_skills=2,
                spellcasting=True,
                starting_equipment="- (a) a light crossbow and 20 bolts or (b) any simple weapon\n- (a) a component pouch or (b) an arcane focus\n- (a) a scholar's pack or (b) a dungeoneer's pack\n- Leather armor, any simple weapon, and two daggers",
                class_features="Spellcasting, Otherworldly Patron, Pact Magic, Eldritch Invocations, Pact Boon, Ability Score Improvement, Mystic Arcanum, Eldritch Master"
                ),
            Class(
                name="Wizard",
                hit_die=6,
                saving_throws="Intelligence, Wisdom",
                armor_proficiencies="None",
                weapon_proficiencies="Daggers, darts, slings, quarterstaffs, light crossbows",
                tool_proficiencies="None",
                skill_choices="Arcana, History, Insight, Investigation, Medicine, Religion",
                num_skills=2,
                spellcasting=True,
                starting_equipment="- (a) a quarterstaff or (b) a dagger\n- (a) a component pouch or (b) an arcane focus\n- (a) a scholar's pack or (b) an explorer's pack\n- A spellbook",
                class_features="Spellcasting, Arcane Recovery, Arcane Tradition, Ability Score Improvement, Spell Mastery, Signature Spells"
                ),
        ]
        db.session.bulk_save_objects(classes)
        db.session.commit()

    # Provera da li tabela backgrounds već ima podatke
    if not Background.query.first():
        backgrounds = [
            Background(
                name="Acolyte",
                skill_proficiencies="Insight, Religion",
                tool_proficiencies=None,
                starting_equipment="Holy symbol, prayer book, 5 sticks of incense, vestments, common clothes, pouch with 15 gp",
                starting_gold=15,
                features="Shelter of the Faithful",
                languages="Two of your choice"
            ),
            Background(
                name="Charlatan",
                skill_proficiencies="Deception, Sleight of Hand",
                tool_proficiencies="Disguise kit, Forgery kit",
                starting_equipment="Fine clothes, disguise kit, con tools (bottles, weighted dice, marked cards, or fake signet ring), pouch with 15 gp",
                starting_gold=15,
                features="False Identity",
                languages=None
            ),
            Background(
                name="Criminal",
                skill_proficiencies="Deception, Stealth",
                tool_proficiencies="One type of gaming set, Thieves' tools",
                starting_equipment="Crowbar, dark common clothes with hood, pouch with 15 gp",
                starting_gold=15,
                features="Criminal Contact",
                languages=None
            ),
            Background(
                name="Entertainer",
                skill_proficiencies="Acrobatics, Performance",
                tool_proficiencies="Disguise kit, One type of musical instrument",
                starting_equipment="Musical instrument, favor of admirer, costume, pouch with 15 gp",
                starting_gold=15,
                features="By Popular Demand",
                languages=None
            ),
            Background(
                name="Folk Hero",
                skill_proficiencies="Animal Handling, Survival",
                tool_proficiencies="One type of artisan's tools, Land vehicles",
                starting_equipment="Set of artisan's tools, shovel, iron pot, common clothes, pouch with 10 gp",
                starting_gold=10,
                features="Rustic Hospitality",
                languages=None
            ),
            Background(
                name="Guild Artisan",
                skill_proficiencies="Insight, Persuasion",
                tool_proficiencies="One type of artisan's tools",
                starting_equipment="Set of artisan's tools, letter of introduction, traveler's clothes, pouch with 15 gp",
                starting_gold=15,
                features="Guild Membership",
                languages="One of your choice"
            ),
            Background(
                name="Hermit",
                skill_proficiencies="Medicine, Religion",
                tool_proficiencies="Herbalism kit",
                starting_equipment="Scroll case with notes, winter blanket, common clothes, herbalism kit, pouch with 5 gp",
                starting_gold=5,
                features="Discovery",
                languages="One of your choice"
            ),
            Background(
                name="Noble",
                skill_proficiencies="History, Persuasion",
                tool_proficiencies="One type of gaming set",
                starting_equipment="Fine clothes, signet ring, scroll of pedigree, purse with 25 gp",
                starting_gold=25,
                features="Position of Privilege",
                languages="One of your choice"
            ),
            Background(
                name="Outlander",
                skill_proficiencies="Athletics, Survival",
                tool_proficiencies="One type of musical instrument",
                starting_equipment="Staff, hunting trap, animal trophy, traveler's clothes, pouch with 10 gp",
                starting_gold=10,
                features="Wanderer",
                languages="One of your choice"
            ),
            Background(
                name="Sage",
                skill_proficiencies="Arcana, History",
                tool_proficiencies=None,
                starting_equipment="Ink bottle, quill, small knife, letter from dead colleague, common clothes, pouch with 10 gp",
                starting_gold=10,
                features="Researcher",
                languages="Two of your choice"
            ),
            Background(
                name="Sailor",
                skill_proficiencies="Athletics, Perception",
                tool_proficiencies="Navigator's tools, Vehicles (water)",
                starting_equipment="Belaying pin (club), 50ft silk rope, lucky charm, common clothes, pouch with 10 gp",
                starting_gold=10,
                features="Ship's Passage",
                languages=None
            ),
            Background(
                name="Soldier",
                skill_proficiencies="Athletics, Intimidation",
                tool_proficiencies="One type of gaming set, Land vehicles",
                starting_equipment="Insignia of rank, trophy from fallen enemy, dice or deck of cards, common clothes, pouch with 10 gp",
                starting_gold=10,
                features="Military Rank",
                languages=None
            ),
            Background(
                name="Urchin",
                skill_proficiencies="Sleight of Hand, Stealth",
                tool_proficiencies="Disguise kit, Thieves' tools",
                starting_equipment="Small knife, city map, pet mouse, token of parents, common clothes, pouch with 10 gp",
                starting_gold=10,
                features="City Secrets",
                languages=None
            ),
        ]
        db.session.bulk_save_objects(backgrounds)
        db.session.commit()

# Funkcija za učitavanje korisnika
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# ---------------- ROUTE DEFINICIJE ---------------- #

# Ruta za registraciju
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data['username']
    email = data['email']
    password = data['password']
    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

    new_user = User(username=username, email=email, password=hashed_password)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "Registration successful"}), 200

# Ruta za prijavu (login)
@app.route('/api/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        print(f"Primljen zahtev za login: {data}")

        username = data.get('username')
        password = data.get('password')

        user = User.query.filter_by(username=username).first()
        print(f"Korisnik pronađen u bazi: {user}")

        if user and bcrypt.check_password_hash(user.password, password):
            login_user(user)
            print("Prijava uspešna!")
            return jsonify({"message": "Login successful"}), 200

        print("Neuspešna prijava - loši kredencijali")
        return jsonify({"message": "Invalid login credentials"}), 401

    except Exception as e:
        print(f"Greška u loginu: {e}")  # OVDE ĆEMO VIDETI TAČNU GREŠKU
        return jsonify({"message": f"An error occurred: {e}"}), 500

# Ruta za odjavu (logout)
@app.route('/api/logout', methods=['POST', 'OPTIONS'])  # Dodao OPTIONS za CORS
@login_required
def logout():
    logout_user()
    return jsonify({"message": "Logout successful"}), 200

# Ruta za proveru sesije
@app.route('/api/check_session', methods=['GET', 'OPTIONS'])  # Dodao OPTIONS za CORS
def check_session():
    if current_user.is_authenticated:
        return jsonify({"loggedIn": True, "username": current_user.username}), 200
    return jsonify({"loggedIn": False}), 200

# Ruta za brisanje jednog korisnika
@app.route('/users/<int:id>', methods=['DELETE'])
def delete_user(id):
    user = User.query.get(id)
    if user:
        db.session.delete(user)
        db.session.commit()

        return jsonify({'message': 'User deleted successfully'}), 200
    else:
        return jsonify({'message': 'User not found'}), 404

if __name__ == '__main__':
    app.run(debug=True)